#
#  benchmark.py
#  Jacobian
#
#  Created by David Freifeld
#  Copyright Â© 2020 David Freifeld. All rights reserved.
#

import mrbpnn
import matplotlib.pyplot as plt
import numpy
import time

def bench(batch_sz, layers):
    init = time.time()
    net = mrbpnn.Network("../data_banknote_authentication.txt", batch_sz, 0.0155, 0.03, 0, 0.9)
    net.add_layer(4, "linear")
    for i in range(layers):
        net.add_layer(5, "relu")
    net.add_layer(2, "linear")
    net.initialize()
    initend = time.time()
    for i in range(50):
        net.train()
    end = time.time()
    return (end-init)

for i in range(1):
    print(bench(16,1))

# x = []
# y = []
# i = 1
# while(i < 125):
#     print(i)
#     y.append(bench(i, 1))
#     x.append(i)
#     i+=1;
# plt.plot(x,y, label = "Jacobian (Sequential)")

# plt.plot(otherlist, [2.3994078636169434, 1.2735769748687744, 1.0030598640441895, 0.8972160816192627, 0.801548957824707, 0.752018928527832, 0.7073678970336914, 0.6857280731201172, 0.6707980632781982, 0.6421489715576172, 0.6614980697631836, 0.6403779983520508, 0.7251319885253906, 0.6796879768371582, 0.6601080894470215, 0.6711599826812744, 0.6432759761810303, 0.6491389274597168, 0.6762490272521973, 0.6859049797058105, 0.7067179679870605, 0.7142889499664307, 0.7258059978485107, 0.7868969440460205, 0.7326970100402832, 0.7365641593933105, 0.7576079368591309, 0.7772500514984131, 0.8062641620635986, 0.7768490314483643, 0.8253629207611084, 0.8264601230621338, 0.8459320068359375, 0.9670729637145996, 0.8388969898223877, 0.9129719734191895, 0.9009649753570557, 0.8916170597076416, 0.8926799297332764, 0.9171609878540039, 0.9242072105407715, 0.9534740447998047, 0.947465181350708, 0.9723358154296875, 1.018247127532959, 1.1208629608154297, 1.014026165008545, 1.034980058670044, 1.0626468658447266, 1.080394983291626, 1.0627479553222656, 1.0839190483093262, 1.0938241481781006, 1.127730131149292, 1.1265759468078613, 1.136888027191162, 1.140428066253662, 1.1712510585784912, 1.206390142440796, 1.2087180614471436, 1.4066569805145264, 1.2425589561462402, 1.280066967010498, 1.2891559600830078, 1.3243582248687744, 1.3152379989624023], label="Keras")
# plt.legend()
# plt.show()
# print(y)

plt.plot([0.5025448077098257, 0.06346596189658764, 0.047917547554598754, 0.04105092616154024, 0.03523913263298199, 0.031739621835796136, 0.028315013611574093, 0.026019472083075448, 0.024406521083899426, 0.022933075354279908, 0.021600019709607246, 0.020935506796379722, 0.020341872339561994, 0.019887265494774282, 0.019298826768017932, 0.019021222173712722, 0.018694215646250782, 0.01869210122639975, 0.01835323961580634, 0.01805996506773795, 0.017826852610588563, 0.017619089276841214, 0.0173522467286016, 0.017464391304677935, 0.01741090491941103, 0.016986178006763254, 0.016966580251704732, 0.016847677484476468, 0.01688444716072269, 0.016816666155598632, 0.016728257525321137, 0.01650929572067639, 0.016523535019764574, 0.016360246686629634, 0.016583477585886453, 0.016515186448995516, 0.016167543447082024, 0.016142403505456843, 0.016143194300608676, 0.01618973151673178, 0.01584432253715314, 0.01614457198639892, 0.015996006825746038, 0.015867076906405406, 0.015746370663870562, 0.015635421002396035, 0.015604364669764566, 0.01580412467568558, 0.015422517508656697, 0.01570749596837556], label="Keras")
plt.plot([0.22765946708964985, 0.05371553719734514, 0.03755848292286033, 0.031034886701316232, 0.029416448738894714, 0.028644813125990085, 0.027122890983788384, 0.025797686040006727, 0.025556786300380104, 0.025362928792686257, 0.025110247483267293, 0.024511196780086352, 0.025183815891478237, 0.024482555564073537, 0.02378877399131557, 0.024125701865020967, 0.02412329411861912, 0.022786135199350237, 0.022480409765085637, 0.021458697166071822, 0.019833367598545273, 0.02021988033199843, 0.01960400892236572, 0.019237394278116573, 0.019515914248845335, 0.018973920885966906, 0.019074104276072507, 0.019292046152524008, 0.01877620817772699, 0.018388098750312793, 0.019136795989971683, 0.01865537591056516, 0.018765945022999747, 0.018489238997267572, 0.018801562214387422, 0.018801799720918007, 0.018268155148376198, 0.019060883800566985, 0.018474303461944327, 0.018674987837030792, 0.01909543504778123, 0.018523710002715618, 0.018588384030547165, 0.017887256971702275, 0.01847935954667011, 0.018385809867809348, 0.018235951924190814, 0.018927972964227, 0.018075138759114685, 0.018163896239800564], label="Keras (set val split)")
plt.plot([0.6356955872469517, 0.4474506605850878, 0.3890421118235231, 0.3383762977820027, 0.2570263108725408, 0.17083878727236804, 0.1206560030408328, 0.09028454783518607, 0.06834034661147965, 0.05482004367813022, 0.046493575456135125, 0.04067401763115656, 0.03674237276445186, 0.03355837383721336, 0.03091509716139769, 0.028653709084133477, 0.026661936578240484, 0.024985219962964603, 0.023432621666806992, 0.022137642019742405, 0.020931669067147784, 0.019861774528818207, 0.018922685342936688, 0.018049194997636995, 0.017238716312126513, 0.016458408508859233, 0.0158025484137779, 0.015156084850422274, 0.014549496406066243, 0.014012374438633365, 0.013499269858957372, 0.013027227670698194, 0.01258420495404383, 0.012184903993599385, 0.011772133709941639, 0.01141798619621345, 0.011055273510342334, 0.01075009333315004, 0.010450198537204518, 0.010153955363072054, 0.009865946080363197, 0.009610634188130004, 0.009366072731556546, 0.009125463513132877, 0.008900918802492984, 0.008680248000794285, 0.008473303210025152, 0.008258737640210677, 0.008091226337141558, 0.007901268149935282], label = "SciKit Learn")
plt.plot([0.147248, 0.0459116, 0.0426555, 0.0399301, 0.038506, 0.0373933, 0.0364922, 0.0356698, 0.0350383, 0.0344831, 0.0340619, 0.0336462, 0.0332532, 0.0329713, 0.032643, 0.0323429, 0.0320908, 0.0318416, 0.0316404, 0.0315699, 0.0313803, 0.0311661, 0.0310349, 0.030904, 0.030829, 0.0307032, 0.0306185, 0.0305414, 0.0305478, 0.0304674, 0.0304535, 0.0303114, 0.0303842, 0.0302684, 0.0302227, 0.0301911, 0.0301535, 0.0301598, 0.0300992, 0.0301056, 0.0300929, 0.0301216, 0.0299648, 0.0300934, 0.0299637, 0.030046, 0.0299663, 0.0299561, 0.0299137, 0.0298976], label = "Jacobian")
plt.legend()
plt.title("Loss over epochs")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.show()

x = ['Keras', 'Scikit-Learn', 'Jacobian (Python)', 'Jacobian (C++)']
speed = [2.87004685402, 2.074756145477295,0.05295228958129883, 0.0521543]

x_pos = [i for i, _ in enumerate(x)]

plt.bar(x_pos, speed, color='green')
plt.ylabel("Time (s)")
plt.title("Runtime for Task")

plt.xticks(x_pos, x)

plt.show()
